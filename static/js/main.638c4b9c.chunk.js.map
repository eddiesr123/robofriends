{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","apis/robotHash.js","containers/App.js","actions/index.js","actions/types.js","reducers/searchReducer.js","reducers/robotsReducer.js","reducers/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","robot","className","src","id","alt","name","email","CardList","robots","map","key","SearchBox","searchField","searchChange","onChange","type","placeholder","value","Scroll","children","style","overflowY","border","height","ErrorBoundary","state","hasError","error","info","this","setState","props","React","Component","axios","create","baseURL","App","onSearchChange","event","setSearchField","target","fetchRobots","filteredRobots","filter","toLowerCase","includes","length","connect","search","robotHash","text","payload","dispatch","a","get","response","data","initialState","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","StrictMode","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.638c4b9c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({ robot }) => {\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img src={`https://robohash.org/${robot.id}?size=275x275`} alt={robot.name} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{robot.name}</h2>\r\n\t\t\t\t<p>{robot.email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\tconst renderCards = () => {\r\n\t\treturn robots.map((robot) => {\r\n\t\t\treturn <Card robot={robot} key={robot.id} />;\r\n\t\t});\r\n\t};\r\n\r\n\treturn <div>{renderCards()}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\r\n\t\t\t\ttype=\"search\"\r\n\t\t\t\tplaceholder=\"search robots\"\r\n\t\t\t\tvalue={searchField}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport '../index.css';\r\n\r\nconst Scroll = ({ children }) => {\r\n\treturn (\r\n\t\t<div id=\"scrollBar\" style={{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n\tstate = { hasError: false };\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({\r\n\t\t\thasError: true\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Oooops. That is not good</h1>;\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n\tbaseURL: 'https://jsonplaceholder.typicode.com/'\r\n});\r\n","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, fetchRobots } from '../actions';\r\nimport '../containers/App.css';\r\n\r\nclass App extends React.Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.props.fetchRobots();\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.props.setSearchField(event.target.value);\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { robots, searchField } = this.props;\r\n\t\tconst filteredRobots = robots.filter((robot) => robot.name.toLowerCase().includes(searchField.toLowerCase()));\r\n\r\n\t\treturn !robots.length ? (\r\n\t\t\t<h1>Loading...</h1>\r\n\t\t) : (\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} searchField={searchField} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.search.searchField,\r\n\t\trobots: state.robotHash.robots\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, { setSearchField, fetchRobots })(App);\r\n","import robotHash from '../apis/robotHash';\r\nimport { CHANGE_SEARCH_FIELD, FETCH_ROBOTS } from './types';\r\n\r\nexport const setSearchField = (text) => {\r\n\treturn {\r\n\t\ttype: CHANGE_SEARCH_FIELD,\r\n\t\tpayload: text\r\n\t};\r\n};\r\n\r\nexport const fetchRobots = () => async (dispatch) => {\r\n\tconst response = await robotHash.get('/users');\r\n\r\n\tdispatch({\r\n\t\ttype: FETCH_ROBOTS,\r\n\t\tpayload: response.data\r\n\t});\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const FETCH_ROBOTS = 'FETCH_ROBOTS';","import { CHANGE_SEARCH_FIELD } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tsearchField: ''\r\n};\r\n\r\nexport default (state = initialState, action = {}) => {\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn { ...state, searchField: action.payload };\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import { FETCH_ROBOTS } from '../actions/types';\r\n\r\nconst initialState = {\r\n\trobots: []\r\n};\r\n\r\nexport default (state = initialState, action = {}) => {\r\n\tswitch (action.type) {\r\n\t\tcase FETCH_ROBOTS:\r\n\t\t\treturn { ...state, robots: action.payload };\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport searchReducer from './searchReducer';\r\nimport robotsReducer from './robotsReducer';\r\n\r\nexport default combineReducers({\r\n\tsearch: searchReducer,\r\n\trobotHash: robotsReducer\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nimport App from './containers/App';\nimport reducers from './reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(reduxThunk)));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<React.StrictMode>\n\t\t\t<App />\n\t\t</React.StrictMode>,\n\t</Provider>,\n\tdocument.querySelector('#root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}